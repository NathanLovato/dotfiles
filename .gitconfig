[user]
  name = Dennis Ideler
  initials = di
  email = ideler.dennis@gmail.com
[core]
  autocrlf = input
  safecrlf = true
  excludesfile = /home/dennis/.gitignore_global
[color]
  ui = auto
[push]
  default = simple
[fetch]
  prune = true
[credential]
  helper = cache --timeout=3600  # Cache credentials for 1 hour when using HTTPS.
[help]
  autocorrect = 35  # Autocorrect typos in 3.5 seconds.
[alias]  # Note: Git ignores aliases that hide existing git commands.

  ### Basics

  br = branch
  cm = commit
  co = checkout
  df = diff
  st = status


  ### Logging

  # Shows history of an existing or deleted file given its path.
  history = log --all -- "$1"

  # Shows the commit message of HEAD.
  last = log -1

  # Shows the commit of HEAD.
  show-last = !git last -p

  # Shows new commits since last command (e.g. after a `git pull`).
  new-commits = !sh -c 'git log $1@{1}..$1@{0} "$@"'

  # Logs commits in a concise graph.
  lg = !git log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative

  # Hides merges (shows a linear graph).
  linear-log = !git lg --no-merges

  # Lists commits of a topic branch that differ from master.
  topic-commits = !git lg master..

  # Lists yours commits made since midnight.
  today = !git log --since=midnight --author=\"$(git config user.name)\" --oneline

  # Lists yours commits made yesterday.
  yesterday = !git log --since=yesterday.midnight --until=midnight --author=\"$(git config user.name)\" --oneline

  # Commit history of last workday; use for daily standup. Uses yesterworkday fish function.
  standup = !fish -ic 'git log --since "(yesterworkday)" --author "(git config user.name)"'


  ### Push

  # "Undo" the last push by force pushing the previous commit. Caution: rewrites pushed history.
  unpush = push -f origin HEAD~1:master

  # Push tags to remote (e.g. GitHub).
  push-tags = push --tags

  # You only live once.
  yolo = push origin HEAD --force --no-verify

  # Pushes all branches and sets upstream.
  go = git push --all --set-upstream origin

  # Lists committed files to be pushed.
  to-push = diff --stat origin/master HEAD


  ### Commits

  # Amends a commit. Adds staged changes to the last commit and rewrites commit msg.
  amend = commit --amend

  # Recommits files that were uncommited.
  recommit = commit --reedit-message ORIG_HEAD

  ### Reset


  ### Pull Requests

  # Opens a PR via hub, after you give a PR title & description.
  # Accepts args for explicit title, pull base, head, and more.
  # E.g.  git pr -m "Fix gh-123" -b dev -h 123-bug-fix
  pr = !hub pull-request

  # Immediately opens a PR with the title and body from the last commit message.
  pr-msg = !git log -n 1 --pretty=format:'%s%n%n%b' | hub pull-request -F -

  ##################

  # Use for creating a new fca release.
  tag-fca = !sh -c 'git tag --annotate deploy_production_$(date +%Y%m%d%H%M%S)'


  branches = for-each-ref --sort=-committerdate --format=\"%(authordate:relative)\t%(color:blue)%(authorname)\t%(color:green)%(refname:short)\" refs/remotes
  # Lists all remote branches, sorted by most recent commit date.
  # Note: for-each-ref --format does not yet support %< syntax for column alignment.
  # http://lists-archives.com/git/797299-for-each-ref-support-aligned-for-left-alignment.html

  co-pr = !sh -c 'git fetch origin pull/$1/head:pr/$1 && git checkout pr/$1' -
  # Checkout a PR branch: git co-pr 123
  # Merge as: git merge pr/123 --ff-only
  # Or with hub: git checkout https://github.com/organization/project/pull/123


  undo = reset --hard
  # Discards all changes since the last commit.
  # This includes unstaging of all files _and_ undoing any modifications.
  # Note that "git checkout" can only undo changes prior to staging.
  # WARNING: Dangerous command, if you want to unstage, use `git unadd`.

  unstage = reset
  unadd = reset HEAD
  # Undo staging of all or given files.
  # Usage: git unstage        # unstages all
  #        git unstage .      # unstages all
  #        git unstage <file> # unstages file

  uncommit = reset --soft HEAD^
  # Undo a commit.


  ##alias = config --get-regexp alias
  # Displays all git aliases.
  # NOTE: Interferes with `hub alias`, use `git aliases` instead (see below).

  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'
  # A neater display of all git aliases.

  rm-remote-file = rm --cached # <filename>
  # Remove a given file from the remote branch.

  rm-remote-branch = !sh -c 'git push origin --delete refs/heads/"$1"' -
  rm-remote-tag = !sh -c 'push origin --delete refs/tags/"$1"' -
  # Remove the remote tag or tracking branch (e.g. on GitHub).
  # Note that without the "refs/.../" it will delete either a branch or tag,
  # or fail if there is a tag and branch with the same name.

  overwrite = !bash -c 'git fetch --all && git reset --hard origin/master'
  # Local repo will exactly match the remote tracking branch.

  pull-rebase = pull --rebase
  # Reapplies commits so history stays linear (use for regular syncing).

  unmerged-branches = branch --no-merged
  # Find local unmerged branches.

  unstash = stash pop
  # Restore stashed modifications (potentially on top a different commit).
  # Removes the state from the stash list. Use `stash apply` to keep the state.


  merge-topic-branch = merge --no-ff
  # No fast-forward merge. Shows branch in history as merge commit.
  # Use on master to ship a feature (i.e. merging finished feature into master).
  # (on master) git merge-topic-branch feature
  #
  # However, if topic branch contains only 1 commit, avoid the merge commit.
  # (on master) git cherry-pick feature

  hash = hash-object # <filename>
  # Get the SHA1 of the file you specify.

  rename-branch = branch -m # <oldname> <newname>
  # Renames the local branch specified.
  # If you have the branch checked out that you want to rename, you can supply
  # only the new name.

  last-sha-origin = !git ls-remote origin --heads refs/heads/master | cut -f1
  # Show SHA1 of last commit on origin.

  release = tag --annotate #<version num>
  # Create an annotated tag for major version releases (e.g. v2.6 or v3.0).
  # Use lightweight tags for smaller releases (e.g. git tag v2.5.3).

  heroku = remote add heroku # git@heroku.com:project.git
  # Add a heroku remote for a heroku web app; not needed if you 'heroku create'.
  # Alternatively, you can use the heroku toolbelt CLI:
  # heroku git:remote -a project, where project is the project name on heroku.


  add-note = notes add
  # Opens the editor to add a note to the last commit

  show-remote-branches = !bash -c 'echo "One sec..." && git fetch && git branch --remotes --verbose'
  # If you want to checkout out a remote branch, simply 'git checkout <name>'.
  # On older versions of git: git checkout --track origin/branch

  shallow-clone = clone --depth 1
  # Clone the repo with no history.
  # Be careful, you may not be able to push or pull.

  add-all = add --all
  # Adds all new and modified content and removes content from index that's no
  # longer in working tree.

  add-modified = add --update .
  # Adds all modified content in the current directory to the staging area,
  # and removes content from index if content has been removed from working tree.

  add-all-modified = add --update :/
  # Similar to `add-modified` but works on the whole tree, not just cwd.

  add-new = !git add $(git ls-files -o --exclude-standard)
  # Adds only all new content to the staging area.

  diff-staged = diff --staged
  # Diff staged (but uncommitted) changes. Default is unstaged changes.
  # --cached also works

  diff-since-commit = diff HEAD
  # View changes since your last commit.
  # Compares your last commit with your working directory.

  show-space = diff --check
  # Shows trailing whitespace and spaces before tabs in unstaged changes.

  abort-merge = merge --abort
  # Aborts a conflicted merge and resets the tree.

  rm-untracked = !fish -ic 'git-clean' # FIXME
  # Cleans untracked files and directories in the working copy.
  # This uses a custom script. See ~/.config/fish/functions/git-clean.fish

  pu = !"git fetch origin -v; git fetch upstream -v; git merge upstream/master"
  # Grab all of the latest changes from both remotes, and then merge in the
  # commits from upstream. Helps to merge in changes easily.



  delete-branch = !sh -c 'git branch -D "$1" && git push origin --delete "$1"' -
  # Nukes a branch locally and on the origin remote.

  ignore-versioned-file = !git update-index --assume-unchanged
  # Ignore a versioned file by assuming it's unchanged.
  # Usage: git ignore-versioned-file /path/to/file
  # Note: Use this for versioned files that are often changed but rarely
  #       committed (e.g. local configuration files).
  #       Do not use this for files you accidentally versioned and want to
  #       ignore! Use `git rm --cached /path/to/file` instead.

  unignore-versioned-file = !git update-index --no-assume-unchanged
  # Tracks a versioned file that you previously ignored.
  # See ignore-versioned-file alias.

  untrack = !git rm --cached
  # Untrack a file/directory.
  # Usage: git untrack /path/to/file
  # Note: Don't forget to add file/dir to your .gitignore!
  #       For collaborative environments, consider update-index instead.

  prune-origin = fetch --prune origin
  # Clean up all local tracking branches that no longer exist on the remote.
  # Use when old remote branches are polluting your auto-completion.

  housekeeping = gc --aggressive
  # Cleanup unnecessary files and optimize the local repository.
  # Run this task on a regular basis within each repository.

  topic-changes = !sh -c 'git diff master'
  # Diff of all the changes that the topic branch will introduce.
  # Use within topic branch.


  commit-count = rev-list --count HEAD
  # Show commit count of current branch.
  # Replace HEAD with branch name to see other branch counts.

  start = !git init && git commit --allow-empty -m \"Let's do this!\"
  # Use this instead of git init when creating a new repo.

  recent = for-each-ref --count=5 --sort=-committerdate --format='%(refname:short)' refs/heads
  # Shows recent branches.

  # Note that you can also use (local) functions for aliases. E.g.
  # foo = "!f() { echo "$1"; }; f"

  ### TIPS
  #
  # Grab files from a branch that don't exist in the current branch:
  #   git checkout <branch> <paths>
  #
  # If GitHub is asking for your username and password on a push, it's probably
  # because you cloned using HTTPS instead of SSH. Fix with:
  #   git remote set-url origin git@github.com:username/repo.git
  #
  # Show the last commit that matches a regex:
  #   git show :/pattern
  #   git show :/^Merge

[filter "hawser"]  # Added by GitHub for Mac, which uses git-hawser.
	clean = git hawser clean %f
	smudge = git hawser smudge %f
	required = true
