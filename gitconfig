[user]
  name = Dennis Ideler
  email = ideler.dennis@gmail.com
[core]
  autocrlf = input
  safecrlf = true
  excludesfile = /home/dennis/.gitignore_global
[github]
  user = dideler
  token = --redacted--
[color]
  ui = auto
[push]
	default = simple
[alias]
# Check out https://git.wiki.kernel.org/index.php/Aliases
# Note that aliases that hide existing git commands are ignored.
  
  rewrite-commit-msg = commit --amend
  # Allows you to rewrite the most recent commit message.
  # Note that this will change the id of the commit.
  # You're effectively creating a new commit to replace the old one.
  # 
  # You can also reword the last (or older) commit messages with git rebase and
  # the reword operation.
  #
  # Both amend and rebase will rewrite history.
  # Do NOT use them if you've already pushed your commits to a shared repo.
  #
  # NOTE: --amend can also be used to take staged changes and push them into the
  #       previous commit. The add-to-last-commit alias is used for this, and
  #       does the staging part for you.

  add-to-last-commit = !bash -c 'git add "$@" && git commit --amend' -
  # Takes unstaged changes (of given files) and adds them to the previous commit.
  # Or if no args provided, takes the staged changes and adds them to the previous commit.
  # Useful when adding small chunks to a WIP commit.
  # Equivalent to: uncommit + add changes + recommit
  #
  # Alternatively, you can create lots of temporary commits and squash them
  # together using git rebase and the pick and squash operations.

  undo = reset --hard
  # Discards all changes since the last commit.
  # This includes unstaging of all files _and_ undoing any modifications.
  # Note that "git checkout" can only undo changes prior to staging.

  unstage = reset
  unadd = reset HEAD
  # Undo staging of all or given files.
  # Usage: git unstage        # unstages all
  #        git unstage .      # unstages all
  #        git unstage <file> # unstages file

  uncommit = reset --soft HEAD^
  # Undo a commit.

  recommit = commit -c ORIG_HEAD
  # Recommit files that were uncommit.

  ##alias = config --get-regexp alias
  # Displays all git aliases.
  # NOTE: Interferes with `hub alias`, use `git aliases` instead (see below).

  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'
  # A neater display of all git aliases.

  rm-remote-file = rm --cached # <filename>
  # Remove a given file from the remote branch.

  rm-remote-branch = push origin --delete
  rm-remote-tag = push origin --delete
  # Remove the remote tag or tracking branch (e.g. on GitHub).

  overwrite = !git fetch --all && git reset --hard origin/master
  # Local repo will exactly match the remote tracking branch.

  pull-rebase = pull --rebase
  # Reapplies commits so history stays linear (use for regular syncing).

  unmerged-branches = branch --no-merged
  # Find local unmerged branches.

  unstash = stash apply
  # Restore stashed modifications (potentially on top a different commit).

  unpush = push -f origin HEAD~1:master
  # Undo a push. Replace 1 with number of pushes to undo.
  # Warning: Do not rewrite history is someone has pulled your changes!
  # Note: HEAD~1 means exactly the same thing as HEAD^, "the commit before HEAD".

  merge-no-ff = merge --no-ff # <branchname>
  # No fast-forward merge. Shows branch in history as merge commit.
  # Use on master to ship a feature (i.e. merging finished feature into master).
  # (on master) git merge-no-ff feature
  #
  # However, if topic branch contains only 1 commit, avoid the merge commit.
  # (on master) git cherry-pick feature

  hash = hash-object # <filename>
  # Get the SHA1 of the file you specify.

  rename-branch = branch -m # <oldname> <newname>
  # Renames the local branch specified.

  push-tags = push --tags
  # Push tags to remote (e.g. GitHub).

  last = log -1
  # Show the commit message of HEAD (i.e. last commit msg).

  last-sha-origin = !git ls-remote origin --heads refs/heads/master | cut -f1
  # Show SHA1 of last commit on origin.

  release = tag -a
  # Create an annotated tag for major version releases (e.g. v2.6 or v3.0).
  # Use lightweight tags for smaller releases (e.g. git tag v2.5.3).

  heroku = remote add heroku # git@heroku.com:project.git
  # Add a heroku remote for a heroku web app.
  # Alternatively, you can use the heroku toolbelt CLI:
  # heroku git:remote -a project, where project is the project name on heroku.

  new-commits = !sh -c 'git log $1@{1}..$1@{0} "$@"'
  # See what new commits have been created by the last command
  # (e.g. after a "git pull")

  add-note = notes add
  # Opens the editor to add a note to the last commit

  checkout-and-track = checkout -t
  # Creates, checks out, and tracks a remote branch.
  # Usage:  git checkout-and-track origin/some-remote-branch

  ### TIPS
  #
  # Checkout a remote branch that doesn't exist locally and track it:
  #   git checkout --track origin/branch
  #
  # Grab files from a branch that don't exist in the current branch:
  #   git checkout <branch> <paths>
  #
  # If GitHub is asking for your username and password on a push, it's probably
  # because you cloned using HTTPS instead of SSH. Fix with:
  #   git remote set-url origin git@github.com:username/repo.git
  #
  # Show the last commit that matches a regex:
  #   git show :/pattern
  #   git show :/^Merge
