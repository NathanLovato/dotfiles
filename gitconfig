[user]
  name = Dennis Ideler
  email = ideler.dennis@gmail.com
[core]
  autocrlf = input
  safecrlf = true
  excludesfile = /home/dennis/.gitignore_global
[github]
  user = dideler
  token = --redacted--
[color]
  ui = auto
[alias]
  unadd = reset HEAD # <filenames>
  # Undo staging of given files (use . for all staged files).
  
  fixcommit = commit --amend
  amend = commit --amend
  # Take staged changes and push them into the previous commit.
  # Useful when adding small chunks to a WIP commit.
  # Equivalent to: uncommit + add changes + recommit

  uncommit = reset --soft HEAD^
  # Undo a commit.

  recommit = commit -c ORIG_HEAD
  # Recommit files that were uncommit.

  alias = config --get-regexp alias
  # Displays all git aliases.

  rm-remote-file = rm --cached # <filename>
  # Remove a given file from the remote branch.

  rm-remote-branch = push origin --delete
  rm-remote-tag = push origin --delete
  # Remove the remote tag or tracking branch (e.g. on GitHub).

  overwrite = fetch --all && git reset --hard origin/master
  fresh = fetch --all && git reset --hard origin/master
  # Local repo will exactly match the remote tracking branch.

  pull-rebase = pull --rebase
  # Reapplies commits so history stays linear (use for regular syncing).

  unmerged-branches = branch --no-merged
  # Find local unmerged branches.

  unstash = stash apply
  # Restore stashed modifications (potentially on top a different commit).

  unpush = push -f origin HEAD~1:master
  # Undo a push. Replace 1 with number of pushes to undo.
  # Warning: Do not rewrite history is someone has pulled your changes!
  # Note: HEAD~1 means exactly the same thing as HEAD^, "the commit before HEAD".

  merge-no-ff = merge --no-ff # <branchname>
  # No fast-forward merge.
  # Shows branch in history (as merge commit) when merging finished feature into master.

  hash = hash-object # <filename>
  # Get the SHA1 of the file you specify.

  rename-branch = branch -m # <oldname> <newname>
  # Renames the local branch specified.

  push-tags = push --tags
  # Push tags to remote (e.g. GitHub).

  last = log -1
  # Show the commit message of HEAD (i.e. last commit msg).
  
  release = tag -a
  # Create an annotated tag for major version releases (e.g. v2.6 or v3.0).
  # Use lightweight tags for smaller releases (e.g. git tag v2.5.3).
  
  ### TIPS
  #
  # Checkout a remote branch that doesn't exist locally and track it:
  #   git checkout --track origin/branch
  #
  # Grab files from a branch that don't exist in the current branch:
  #   git checkout <branch> <paths>
